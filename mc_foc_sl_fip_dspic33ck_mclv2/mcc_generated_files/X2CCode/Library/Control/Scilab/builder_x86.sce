// This file was generated by createLibraryBuilder.sce on 30-08-2023 03:22

jimport at.lcm.x2c.utils.Utils;
jimport java.io.File;
if(findmsvccompiler() ~= "unknown") then
    configure_msvc();
end
if ~haveacompiler() then
    mprintf("Building Control library for x86 system skipped (no compiler found).\n");
    return;
end

X2C_ROOT = jinvoke(jinvoke(Utils, "getRootDirectory"), "toString");
X2C_LIB_PATH = get_absolute_file_path("builder_x86.sce");
X2C_LIB_PATH = jinvoke(jnewInstance(File, X2C_LIB_PATH), "getParent");

try
    // delete "is-compiled" marker
    mdelete("Library_is_compiled_for_x86.*");

    // prepare names and flags for building command
    names = [];
    files = [];
    names = [names,  "x2c_AdaptivePT1_FiP8_C" "x2c_AdaptivePT1_FiP16_C" "x2c_AdaptivePT1_FiP32_C" "x2c_AdaptivePT1_Float32_C" "x2c_AdaptivePT1_Float64_C"];
    files = [files,  "x2c_AdaptivePT1_FiP8_C.c" "x2c_AdaptivePT1_FiP16_C.c" "x2c_AdaptivePT1_FiP32_C.c" "x2c_AdaptivePT1_Float32_C.c" "x2c_AdaptivePT1_Float64_C.c"];
    names = [names,  "x2c_D_FiP16_C" "x2c_D_FiP32_C" "x2c_D_Float32_C" "x2c_D_Float64_C"];
    files = [files,  "x2c_D_FiP16_C.c" "x2c_D_FiP32_C.c" "x2c_D_Float32_C.c" "x2c_D_Float64_C.c"];
    names = [names,  "x2c_Delay_Bool_C" "x2c_Delay_FiP16_C" "x2c_Delay_FiP32_C" "x2c_Delay_Float32_C" "x2c_Delay_Float64_C"];
    files = [files,  "x2c_Delay_Bool_C.c" "x2c_Delay_FiP16_C.c" "x2c_Delay_FiP32_C.c" "x2c_Delay_Float32_C.c" "x2c_Delay_Float64_C.c"];
    names = [names,  "x2c_DLimit_FiP16_C" "x2c_DLimit_FiP32_C" "x2c_DLimit_Float32_C" "x2c_DLimit_Float64_C"];
    files = [files,  "x2c_DLimit_FiP16_C.c" "x2c_DLimit_FiP32_C.c" "x2c_DLimit_Float32_C.c" "x2c_DLimit_Float64_C.c"];
    names = [names,  "x2c_DT1_FiP8_C" "x2c_DT1_FiP16_C" "x2c_DT1_FiP32_C" "x2c_DT1_Float32_C" "x2c_DT1_Float64_C"];
    files = [files,  "x2c_DT1_FiP8_C.c" "x2c_DT1_FiP16_C.c" "x2c_DT1_FiP32_C.c" "x2c_DT1_Float32_C.c" "x2c_DT1_Float64_C.c"];
    names = [names,  "x2c_I_FiP16_C" "x2c_I_FiP32_C" "x2c_I_Float32_C" "x2c_I_Float64_C"];
    files = [files,  "x2c_I_FiP16_C.c" "x2c_I_FiP32_C.c" "x2c_I_Float32_C.c" "x2c_I_Float64_C.c"];
    names = [names,  "x2c_ILimit_FiP16_C" "x2c_ILimit_FiP32_C" "x2c_ILimit_Float32_C" "x2c_ILimit_Float64_C"];
    files = [files,  "x2c_ILimit_FiP16_C.c" "x2c_ILimit_FiP32_C.c" "x2c_ILimit_Float32_C.c" "x2c_ILimit_Float64_C.c"];
    names = [names,  "x2c_P_FiP16_C" "x2c_P_FiP32_C" "x2c_P_Float32_C" "x2c_P_Float64_C"];
    files = [files,  "x2c_P_FiP16_C.c" "x2c_P_FiP32_C.c" "x2c_P_Float32_C.c" "x2c_P_Float64_C.c"];
    names = [names,  "x2c_PI_FiP8_C" "x2c_PI_FiP16_C" "x2c_PI_FiP32_C" "x2c_PI_Float32_C" "x2c_PI_Float64_C"];
    files = [files,  "x2c_PI_FiP8_C.c" "x2c_PI_FiP16_C.c" "x2c_PI_FiP32_C.c" "x2c_PI_Float32_C.c" "x2c_PI_Float64_C.c"];
    names = [names,  "x2c_PID_FiP8_C" "x2c_PID_FiP16_C" "x2c_PID_FiP32_C" "x2c_PID_Float32_C" "x2c_PID_Float64_C"];
    files = [files,  "x2c_PID_FiP8_C.c" "x2c_PID_FiP16_C.c" "x2c_PID_FiP32_C.c" "x2c_PID_Float32_C.c" "x2c_PID_Float64_C.c"];
    names = [names,  "x2c_PIDLimit_FiP8_C" "x2c_PIDLimit_FiP16_C" "x2c_PIDLimit_FiP32_C" "x2c_PIDLimit_Float32_C" "x2c_PIDLimit_Float64_C"];
    files = [files,  "x2c_PIDLimit_FiP8_C.c" "x2c_PIDLimit_FiP16_C.c" "x2c_PIDLimit_FiP32_C.c" "x2c_PIDLimit_Float32_C.c" "x2c_PIDLimit_Float64_C.c"];
    names = [names,  "x2c_PILimit_FiP8_C" "x2c_PILimit_FiP16_C" "x2c_PILimit_FiP32_C" "x2c_PILimit_Float32_C" "x2c_PILimit_Float64_C"];
    files = [files,  "x2c_PILimit_FiP8_C.c" "x2c_PILimit_FiP16_C.c" "x2c_PILimit_FiP32_C.c" "x2c_PILimit_Float32_C.c" "x2c_PILimit_Float64_C.c"];
    names = [names,  "x2c_PLimit_FiP16_C" "x2c_PLimit_FiP32_C" "x2c_PLimit_Float32_C" "x2c_PLimit_Float64_C"];
    files = [files,  "x2c_PLimit_FiP16_C.c" "x2c_PLimit_FiP32_C.c" "x2c_PLimit_Float32_C.c" "x2c_PLimit_Float64_C.c"];
    names = [names,  "x2c_PT1_FiP8_C" "x2c_PT1_FiP16_C" "x2c_PT1_FiP32_C" "x2c_PT1_Float32_C" "x2c_PT1_Float64_C"];
    files = [files,  "x2c_PT1_FiP8_C.c" "x2c_PT1_FiP16_C.c" "x2c_PT1_FiP32_C.c" "x2c_PT1_Float32_C.c" "x2c_PT1_Float64_C.c"];
    names = [names,  "x2c_TDSystemO1_FiP8_C" "x2c_TDSystemO1_FiP16_C" "x2c_TDSystemO1_FiP32_C" "x2c_TDSystemO1_Float32_C" "x2c_TDSystemO1_Float64_C"];
    files = [files,  "x2c_TDSystemO1_FiP8_C.c" "x2c_TDSystemO1_FiP16_C.c" "x2c_TDSystemO1_FiP32_C.c" "x2c_TDSystemO1_Float32_C.c" "x2c_TDSystemO1_Float64_C.c"];
    names = [names,  "x2c_TDSystemO2_FiP8_C" "x2c_TDSystemO2_FiP16_C" "x2c_TDSystemO2_FiP32_C" "x2c_TDSystemO2_Float32_C" "x2c_TDSystemO2_Float64_C"];
    files = [files,  "x2c_TDSystemO2_FiP8_C.c" "x2c_TDSystemO2_FiP16_C.c" "x2c_TDSystemO2_FiP32_C.c" "x2c_TDSystemO2_Float32_C.c" "x2c_TDSystemO2_Float64_C.c"];
    names = [names,  "x2c_TF1_FiP8_C" "x2c_TF1_FiP16_C" "x2c_TF1_FiP32_C" "x2c_TF1_Float32_C" "x2c_TF1_Float64_C"];
    files = [files,  "x2c_TF1_FiP8_C.c" "x2c_TF1_FiP16_C.c" "x2c_TF1_FiP32_C.c" "x2c_TF1_Float32_C.c" "x2c_TF1_Float64_C.c"];
    names = [names,  "x2c_TF2_FiP16_C" "x2c_TF2_FiP8_C" "x2c_TF2_FiP32_C" "x2c_TF2_Float32_C" "x2c_TF2_Float64_C"];
    files = [files,  "x2c_TF2_FiP16_C.c" "x2c_TF2_FiP8_C.c" "x2c_TF2_FiP32_C.c" "x2c_TF2_Float32_C.c" "x2c_TF2_Float64_C.c"];
    names = [names,  "x2c_uI_FiP8_C" "x2c_uI_FiP16_C" "x2c_uI_FiP32_C" "x2c_uI_Float32_C" "x2c_uI_Float64_C"];
    files = [files,  "x2c_uI_FiP8_C.c" "x2c_uI_FiP16_C.c" "x2c_uI_FiP32_C.c" "x2c_uI_Float32_C.c" "x2c_uI_Float64_C.c"];
    files = [files, "x2c_Utils.c"];
    flag = "c";
    loadername = "loader_x86.sce";
    libname = "Control_x86";
    ldflags = fullfile(SCI, "bin", "scicos.lib");
    cflags = "-I" + fullfile(SCI, "modules", "scicos_blocks", "includes") + " -I" + fullfile(SCI, "modules", "scicos", "includes") + " -I" + fullfile(X2C_ROOT, "Controller", "Common") + " -I" + fullfile(X2C_LIB_PATH, "Controller", "src") + " -I" + fullfile(X2C_LIB_PATH, "Controller", "inc");

    // Support for Scilab 5 build in different directory
    if isMajorVersionLessThan(6) then
        scilab5_path = fullfile(X2C_LIB_PATH, "Scilab5");
        if ~isdir(scilab5_path) then
            mkdir(scilab5_path);
        end
        // copy C source files
        num_files = size(files, 2);
        for i = 1:num_files
            copyfile(files(i), scilab5_path);
        end
        // switch to Scilab 5 directory to start build there
        cd(scilab5_path);
    end

    // build library
    ilib_for_link(names, files, [], flag, "", loadername, libname, ldflags, cflags);

    // delete temporary C files for Scilab 5 build
    if isMajorVersionLessThan(6) then
        mdelete(fullfile(scilab5_path, "*.c"));
    end
    // delete temporary files
    if isdir("Debug") then
      rmdir("Debug","s");
    end
    if isdir("Release") then
      rmdir("Release","s");
    end
    mdelete("Makelib.mak")

    // create "is-compiled" marker
    currentTime=clock();
    save("Library_is_compiled_for_x86.hdf5", "currentTime");

    mprintf("Library Control for x86 system built.\n");

catch
    mprintf("Error building library Control for x86 system: %s\n", lasterror());
end
