// This file is released under the 3-clause BSD license. See COPYING-BSD.
// Generated by builder.sce : Please, do not edit this file
// ----------------------------------------------------------------------------
//
if win64() then
  warning(_("This module requires a Windows x86 platform."));
  return
end
//
Filter_x86_path = get_absolute_file_path('loader_x86.sce');
//
// ulink previous function with same name
[bOK, ilib] = c_link('x2c_ACDC_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_ACDC_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_ACDC_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_ACDC_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_AdaptiveNotc_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_AdaptiveNotc_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_AdaptiveNotc_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_AdaptiveNotc_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_BandpassBiQ_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_BandpassBiQ_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_BandpassBiQ_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_BandpassBiQ_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_BandstopBiQ_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_BandstopBiQ_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_BandstopBiQ_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_BandstopBiQ_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Bilin_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Bilin_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Bilin_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Bilin_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Biquad_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Biquad_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Biquad_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Biquad_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_FundFreq_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_FundFreq_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_FundFreq_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_FundFreq_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_HighpassBiQ_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_HighpassBiQ_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_HighpassBiQ_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_HighpassBiQ_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_IIR_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_IIR_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_IIR_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_IIR_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_LowpassBiQ_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_LowpassBiQ_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_LowpassBiQ_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_LowpassBiQ_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_MinMaxPeriod_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_MinMaxPeriod_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_MinMaxPeriod_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_MinMaxPeriod_Float64_C');
if bOK then
  ulink(ilib);
end
//
link(Filter_x86_path + 'libFilter_x86' + getdynlibext(), ['x2c_ACDC_FiP16_C','x2c_ACDC_FiP32_C','x2c_ACDC_Float32_C','x2c_ACDC_Float64_C','x2c_AdaptiveNotc_FiP16_C','x2c_AdaptiveNotc_FiP32_C','x2c_AdaptiveNotc_Float32_C','x2c_AdaptiveNotc_Float64_C','x2c_BandpassBiQ_FiP16_C','x2c_BandpassBiQ_FiP32_C','x2c_BandpassBiQ_Float32_C','x2c_BandpassBiQ_Float64_C','x2c_BandstopBiQ_FiP16_C','x2c_BandstopBiQ_FiP32_C','x2c_BandstopBiQ_Float32_C','x2c_BandstopBiQ_Float64_C','x2c_Bilin_FiP16_C','x2c_Bilin_FiP32_C','x2c_Bilin_Float32_C','x2c_Bilin_Float64_C','x2c_Biquad_FiP16_C','x2c_Biquad_FiP32_C','x2c_Biquad_Float32_C','x2c_Biquad_Float64_C','x2c_FundFreq_FiP16_C','x2c_FundFreq_FiP32_C','x2c_FundFreq_Float32_C','x2c_FundFreq_Float64_C','x2c_HighpassBiQ_FiP16_C','x2c_HighpassBiQ_FiP32_C','x2c_HighpassBiQ_Float32_C','x2c_HighpassBiQ_Float64_C','x2c_IIR_FiP16_C','x2c_IIR_FiP32_C','x2c_IIR_Float32_C','x2c_IIR_Float64_C','x2c_LowpassBiQ_FiP16_C','x2c_LowpassBiQ_FiP32_C','x2c_LowpassBiQ_Float32_C','x2c_LowpassBiQ_Float64_C','x2c_MinMaxPeriod_FiP16_C','x2c_MinMaxPeriod_FiP32_C','x2c_MinMaxPeriod_Float32_C','x2c_MinMaxPeriod_Float64_C'],'c');
// remove temp. variables on stack
clear Filter_x86_path;
clear bOK;
clear ilib;
// ----------------------------------------------------------------------------
