// This file is released under the 3-clause BSD license. See COPYING-BSD.
// Generated by builder.sce : Please, do not edit this file
// ----------------------------------------------------------------------------
//
if ~win64() then
  warning(_("This module requires a Windows x64 platform."));
  return
end
//
MCHP_x64_path = get_absolute_file_path('loader_x64.sce');
//
// ulink previous function with same name
[bOK, ilib] = c_link('x2c_BEMF_MCHP_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_BEMF_MCHP_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_BEMF_MCHP_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Clarke_inv_M_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Clarke_inv_M_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Clarke_inv_M_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Clarke_MCHP_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Clarke_MCHP_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Clarke_MCHP_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Clarke_Park__FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Clarke_Park__FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Clarke_Park__Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Park_Clarke__FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Park_Clarke__FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Park_Clarke__Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Park_inv_MCH_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Park_inv_MCH_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Park_inv_MCH_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Park_MCHP_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Park_MCHP_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Park_MCHP_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Perturbation_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Perturbation_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Perturbation_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Perturbation_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_RandomGen_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_RandomGen_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_RandomGen_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_RandomGen_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_SquareGen_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_SquareGen_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_SquareGen_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_SquareGen_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_SVM_MCHP_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_SVM_MCHP_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_SVM_MCHP_Float32_C');
if bOK then
  ulink(ilib);
end
//
link(MCHP_x64_path + 'libMCHP_x64' + getdynlibext(), ['x2c_BEMF_MCHP_FiP16_C','x2c_BEMF_MCHP_FiP32_C','x2c_BEMF_MCHP_Float32_C','x2c_Clarke_inv_M_FiP16_C','x2c_Clarke_inv_M_FiP32_C','x2c_Clarke_inv_M_Float32_C','x2c_Clarke_MCHP_FiP16_C','x2c_Clarke_MCHP_FiP32_C','x2c_Clarke_MCHP_Float32_C','x2c_Clarke_Park__FiP16_C','x2c_Clarke_Park__FiP32_C','x2c_Clarke_Park__Float32_C','x2c_Park_Clarke__FiP16_C','x2c_Park_Clarke__FiP32_C','x2c_Park_Clarke__Float32_C','x2c_Park_inv_MCH_FiP16_C','x2c_Park_inv_MCH_FiP32_C','x2c_Park_inv_MCH_Float32_C','x2c_Park_MCHP_FiP16_C','x2c_Park_MCHP_FiP32_C','x2c_Park_MCHP_Float32_C','x2c_Perturbation_FiP16_C','x2c_Perturbation_FiP32_C','x2c_Perturbation_Float32_C','x2c_Perturbation_Float64_C','x2c_RandomGen_FiP16_C','x2c_RandomGen_FiP32_C','x2c_RandomGen_Float32_C','x2c_RandomGen_Float64_C','x2c_SquareGen_FiP16_C','x2c_SquareGen_FiP32_C','x2c_SquareGen_Float32_C','x2c_SquareGen_Float64_C','x2c_SVM_MCHP_FiP32_C','x2c_SVM_MCHP_FiP16_C','x2c_SVM_MCHP_Float32_C'],'c');
// remove temp. variables on stack
clear MCHP_x64_path;
clear bOK;
clear ilib;
// ----------------------------------------------------------------------------
