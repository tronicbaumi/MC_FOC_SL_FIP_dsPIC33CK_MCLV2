// This file was generated by createLibraryBuilder.sce on 30-08-2023 03:21

jimport at.lcm.x2c.utils.Utils;
jimport java.io.File;
if(findmsvccompiler() ~= "unknown") then
    configure_msvc();
end
if ~haveacompiler() then
    mprintf("Building Math library for x86 system skipped (no compiler found).\n");
    return;
end

X2C_ROOT = jinvoke(jinvoke(Utils, "getRootDirectory"), "toString");
X2C_LIB_PATH = get_absolute_file_path("builder_x86.sce");
X2C_LIB_PATH = jinvoke(jnewInstance(File, X2C_LIB_PATH), "getParent");

try
    // delete "is-compiled" marker
    mdelete("Library_is_compiled_for_x86.*");

    // prepare names and flags for building command
    names = [];
    files = [];
    names = [names,  "x2c_Abs_FiP8_C" "x2c_Abs_FiP16_C" "x2c_Abs_FiP32_C" "x2c_Abs_Float32_C" "x2c_Abs_Float64_C"];
    files = [files,  "x2c_Abs_FiP8_C.c" "x2c_Abs_FiP16_C.c" "x2c_Abs_FiP32_C.c" "x2c_Abs_Float32_C.c" "x2c_Abs_Float64_C.c"];
    names = [names,  "x2c_Acos_FiP8_C" "x2c_Acos_FiP16_C" "x2c_Acos_FiP32_C" "x2c_Acos_Float32_C" "x2c_Acos_Float64_C"];
    files = [files,  "x2c_Acos_FiP8_C.c" "x2c_Acos_FiP16_C.c" "x2c_Acos_FiP32_C.c" "x2c_Acos_Float32_C.c" "x2c_Acos_Float64_C.c"];
    names = [names,  "x2c_Add_FiP8_C" "x2c_Add_FiP16_C" "x2c_Add_FiP32_C" "x2c_Add_Float32_C" "x2c_Add_Float64_C"];
    files = [files,  "x2c_Add_FiP8_C.c" "x2c_Add_FiP16_C.c" "x2c_Add_FiP32_C.c" "x2c_Add_Float32_C.c" "x2c_Add_Float64_C.c"];
    names = [names,  "x2c_Asin_FiP8_C" "x2c_Asin_FiP16_C" "x2c_Asin_FiP32_C" "x2c_Asin_Float32_C" "x2c_Asin_Float64_C"];
    files = [files,  "x2c_Asin_FiP8_C.c" "x2c_Asin_FiP16_C.c" "x2c_Asin_FiP32_C.c" "x2c_Asin_Float32_C.c" "x2c_Asin_Float64_C.c"];
    names = [names,  "x2c_Atan2_FiP8_C" "x2c_Atan2_FiP16_C" "x2c_Atan2_FiP32_C" "x2c_Atan2_Float32_C" "x2c_Atan2_Float64_C"];
    files = [files,  "x2c_Atan2_FiP8_C.c" "x2c_Atan2_FiP16_C.c" "x2c_Atan2_FiP32_C.c" "x2c_Atan2_Float32_C.c" "x2c_Atan2_Float64_C.c"];
    names = [names,  "x2c_Average_FiP8_C" "x2c_Average_FiP16_C" "x2c_Average_FiP32_C" "x2c_Average_Float32_C" "x2c_Average_Float64_C"];
    files = [files,  "x2c_Average_FiP8_C.c" "x2c_Average_FiP16_C.c" "x2c_Average_FiP32_C.c" "x2c_Average_Float32_C.c" "x2c_Average_Float64_C.c"];
    names = [names,  "x2c_Cos_FiP8_C" "x2c_Cos_FiP16_C" "x2c_Cos_FiP32_C" "x2c_Cos_Float32_C" "x2c_Cos_Float64_C"];
    files = [files,  "x2c_Cos_FiP8_C.c" "x2c_Cos_FiP16_C.c" "x2c_Cos_FiP32_C.c" "x2c_Cos_Float32_C.c" "x2c_Cos_Float64_C.c"];
    names = [names,  "x2c_Div_FiP8_C" "x2c_Div_FiP16_C" "x2c_Div_FiP32_C" "x2c_Div_Float32_C" "x2c_Div_Float64_C"];
    files = [files,  "x2c_Div_FiP8_C.c" "x2c_Div_FiP16_C.c" "x2c_Div_FiP32_C.c" "x2c_Div_Float32_C.c" "x2c_Div_Float64_C.c"];
    names = [names,  "x2c_Exp_FiP8_C" "x2c_Exp_FiP16_C" "x2c_Exp_FiP32_C" "x2c_Exp_Float32_C" "x2c_Exp_Float64_C"];
    files = [files,  "x2c_Exp_FiP8_C.c" "x2c_Exp_FiP16_C.c" "x2c_Exp_FiP32_C.c" "x2c_Exp_Float32_C.c" "x2c_Exp_Float64_C.c"];
    names = [names,  "x2c_L2Norm_FiP8_C" "x2c_L2Norm_FiP16_C" "x2c_L2Norm_FiP32_C" "x2c_L2Norm_Float32_C" "x2c_L2Norm_Float64_C"];
    files = [files,  "x2c_L2Norm_FiP8_C.c" "x2c_L2Norm_FiP16_C.c" "x2c_L2Norm_FiP32_C.c" "x2c_L2Norm_Float32_C.c" "x2c_L2Norm_Float64_C.c"];
    names = [names,  "x2c_Mult_FiP8_C" "x2c_Mult_FiP16_C" "x2c_Mult_FiP32_C" "x2c_Mult_Float32_C" "x2c_Mult_Float64_C"];
    files = [files,  "x2c_Mult_FiP8_C.c" "x2c_Mult_FiP16_C.c" "x2c_Mult_FiP32_C.c" "x2c_Mult_Float32_C.c" "x2c_Mult_Float64_C.c"];
    names = [names,  "x2c_Negation_FiP8_C" "x2c_Negation_FiP16_C" "x2c_Negation_FiP32_C" "x2c_Negation_Float32_C" "x2c_Negation_Float64_C"];
    files = [files,  "x2c_Negation_FiP8_C.c" "x2c_Negation_FiP16_C.c" "x2c_Negation_FiP32_C.c" "x2c_Negation_Float32_C.c" "x2c_Negation_Float64_C.c"];
    names = [names,  "x2c_Sign_FiP8_C" "x2c_Sign_FiP16_C" "x2c_Sign_FiP32_C" "x2c_Sign_Float32_C" "x2c_Sign_Float64_C"];
    files = [files,  "x2c_Sign_FiP8_C.c" "x2c_Sign_FiP16_C.c" "x2c_Sign_FiP32_C.c" "x2c_Sign_Float32_C.c" "x2c_Sign_Float64_C.c"];
    names = [names,  "x2c_Sin_FiP8_C" "x2c_Sin_FiP16_C" "x2c_Sin_FiP32_C" "x2c_Sin_Float32_C" "x2c_Sin_Float64_C"];
    files = [files,  "x2c_Sin_FiP8_C.c" "x2c_Sin_FiP16_C.c" "x2c_Sin_FiP32_C.c" "x2c_Sin_Float32_C.c" "x2c_Sin_Float64_C.c"];
    names = [names,  "x2c_Sqrt_FiP8_C" "x2c_Sqrt_FiP16_C" "x2c_Sqrt_FiP32_C" "x2c_Sqrt_Float32_C" "x2c_Sqrt_Float64_C"];
    files = [files,  "x2c_Sqrt_FiP8_C.c" "x2c_Sqrt_FiP16_C.c" "x2c_Sqrt_FiP32_C.c" "x2c_Sqrt_Float32_C.c" "x2c_Sqrt_Float64_C.c"];
    names = [names,  "x2c_Sub_FiP8_C" "x2c_Sub_FiP16_C" "x2c_Sub_FiP32_C" "x2c_Sub_Float32_C" "x2c_Sub_Float64_C"];
    files = [files,  "x2c_Sub_FiP8_C.c" "x2c_Sub_FiP16_C.c" "x2c_Sub_FiP32_C.c" "x2c_Sub_Float32_C.c" "x2c_Sub_Float64_C.c"];
    names = [names,  "x2c_Sum_FiP8_C" "x2c_Sum_FiP16_C" "x2c_Sum_FiP32_C" "x2c_Sum_Float32_C" "x2c_Sum_Float64_C"];
    files = [files,  "x2c_Sum_FiP8_C.c" "x2c_Sum_FiP16_C.c" "x2c_Sum_FiP32_C.c" "x2c_Sum_Float32_C.c" "x2c_Sum_Float64_C.c"];
    names = [names,  "x2c_uAdd_FiP8_C" "x2c_uAdd_FiP16_C" "x2c_uAdd_FiP32_C" "x2c_uAdd_Float32_C" "x2c_uAdd_Float64_C"];
    files = [files,  "x2c_uAdd_FiP8_C.c" "x2c_uAdd_FiP16_C.c" "x2c_uAdd_FiP32_C.c" "x2c_uAdd_Float32_C.c" "x2c_uAdd_Float64_C.c"];
    names = [names,  "x2c_uSub_FiP8_C" "x2c_uSub_FiP16_C" "x2c_uSub_FiP32_C" "x2c_uSub_Float32_C" "x2c_uSub_Float64_C"];
    files = [files,  "x2c_uSub_FiP8_C.c" "x2c_uSub_FiP16_C.c" "x2c_uSub_FiP32_C.c" "x2c_uSub_Float32_C.c" "x2c_uSub_Float64_C.c"];
    files = [files, "x2c_Utils.c"];
    flag = "c";
    loadername = "loader_x86.sce";
    libname = "Math_x86";
    ldflags = fullfile(SCI, "bin", "scicos.lib");
    cflags = "-I" + fullfile(SCI, "modules", "scicos_blocks", "includes") + " -I" + fullfile(SCI, "modules", "scicos", "includes") + " -I" + fullfile(X2C_ROOT, "Controller", "Common") + " -I" + fullfile(X2C_LIB_PATH, "Controller", "src") + " -I" + fullfile(X2C_LIB_PATH, "Controller", "inc");

    // Support for Scilab 5 build in different directory
    if isMajorVersionLessThan(6) then
        scilab5_path = fullfile(X2C_LIB_PATH, "Scilab5");
        if ~isdir(scilab5_path) then
            mkdir(scilab5_path);
        end
        // copy C source files
        num_files = size(files, 2);
        for i = 1:num_files
            copyfile(files(i), scilab5_path);
        end
        // switch to Scilab 5 directory to start build there
        cd(scilab5_path);
    end

    // build library
    ilib_for_link(names, files, [], flag, "", loadername, libname, ldflags, cflags);

    // delete temporary C files for Scilab 5 build
    if isMajorVersionLessThan(6) then
        mdelete(fullfile(scilab5_path, "*.c"));
    end
    // delete temporary files
    if isdir("Debug") then
      rmdir("Debug","s");
    end
    if isdir("Release") then
      rmdir("Release","s");
    end
    mdelete("Makelib.mak")

    // create "is-compiled" marker
    currentTime=clock();
    save("Library_is_compiled_for_x86.hdf5", "currentTime");

    mprintf("Library Math for x86 system built.\n");

catch
    mprintf("Error building library Math for x86 system: %s\n", lasterror());
end
